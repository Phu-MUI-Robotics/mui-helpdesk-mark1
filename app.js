const express = require('express');
const line = require('@line/bot-sdk');
const axios = require('axios');
const FormData = require('form-data');  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

const app = express();

const config = {
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN || "5tEgj6rVoHGU8tu795bmdvDgcTD9qrKu6Q9CiU+tiNMHkLbFDhNIt4E1+CI9i6arTbirxg//fI0erUTtXOiHQVykPsiYRu9ZlJd7ObyhZPisKYjWpDlYLZVDLcnI1dVLhHy5c+2BNYa8YJqyNWIfdQdB04t89/1O/w1cDnyilFU=",
  channelSecret: process.env.CHANNEL_SECRET || "705adee04e0adfda3836fb4694317dbd"
}

const client = new line.Client(config);

//‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ User (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
const userSessions = new Map();

//Initial
app.get('/', (req, res) => {
  res.send('LINE Bot is running!');
});

// Webhook handler
app.post('/webhook', line.middleware(config), (req, res) => {
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error(err);
      res.status(500).end();
    });
});

function handleEvent(event) {
    const userId = event.source.userId;

    //‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Rich Menu ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    if (event.type === 'message' && event.message.type === 'text') {
        const text = event.message.text;

        if (text === '‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå') {
            return showProblemTypes(event.replyToken, userId); //Step 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        }

        return handleTextByStep(event, userId, text);
    }

    // ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if (event.type === 'message' && event.message.type === 'image') {
        return handleImageUpload(event, userId);
    }

    //‡∏£‡∏±‡∏ö Postback ‡∏à‡∏≤‡∏Å Quick Reply
    if (event.type === 'postback') {
        const data = event.postback.data;

        if (data.startsWith('problem_type=')) {
            const problemType = data.split('=')[1];
            return askProblemDetails(event.replyToken, userId, problemType); //Step 2: ‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        }

        if (data === 'skip_image'){
            return askContactInfo(event.replyToken, userId);
        }

        if (data === 'finish_images') {
            return askContactInfo(event.replyToken, userId);
        }

        if (data === 'submit_report') {
            return submitReport(event.replyToken, userId);
        }
    }

    return Promise.resolve(null);
}

//Step 1 : ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤
function showProblemTypes(replyToken, userId) {
    userSessions.set(userId, {
        step: 'select_type',
        timestamp: getThaiDateTime()
    });

    const message = {
        type: 'flex',
        altText: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á',
        contents: {
            type: 'bubble',
            header: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'text',
                        text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
                        weight: 'bold',
                        size: 'lg',
                        align: 'center',
                        color: '#ffffff'
                    }
                ],
                backgroundColor: '#4285f4',
                paddingAll: 'lg'
            },
            body: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'text',
                        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á:',
                        wrap: true,
                        margin: 'md'
                    },
                    {
                        type: 'separator',
                        margin: 'lg'
                    },
                    {
                        type: 'button',
                        action: {
                            type: 'postback',
                            label: 'üîß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
                            data: 'problem_type=hardware',
                            displayText: '‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå'
                        },
                        style: 'secondary',
                        margin: 'lg'
                    },
                    {
                        type: 'button',
                        action: {
                            type: 'postback',
                            label: 'üíª ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô Software',
                            data: 'problem_type=software',
                            displayText: '‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô Software'
                        },
                        style: 'secondary',
                        margin: 'md'
                    }
                ],
                spacing: 'md',
                paddingAll: 'lg'
            }
        }
    };

    return client.replyMessage(replyToken, message);
}

// Step 2: ‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
function askProblemDetails(replyToken, userId, problemType) {
  const session = userSessions.get(userId) || {};
  session.problemType = problemType;
  session.problemTypeName = getProblemTypeName(problemType);
  session.step = 'ask_details';
  userSessions.set(userId, session);
  
  const message = {
    type: 'text',
    text: `üìù ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏à‡πâ‡∏á "${session.problemTypeName}"\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤:\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n- ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô : \n- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ : \n- ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ : `
  };
  
  return client.replyMessage(replyToken, message);
}

function handleTextByStep(event, userId, text) {
    const session = userSessions.get(userId);

    if (!session) {
        return Promise.resolve(null);
    }

    if (session.step === 'ask_details') {
        //‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        session.problemDetails = text;
        session.step = 'ask_image';
        userSessions.set(userId, session);

        return askForImage(event.replyToken, userId); // Step 3: ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    }

    if (session.step === 'ask_contact') {
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
        session.contactInfo = text;
        session.step = 'confirm';
        userSessions.set(userId, session);
        
        return showSummary(event.replyToken, userId); // Step 5: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }

    return Promise.resolve(null);
}

// Step 3: ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function askForImage(replyToken, userId) {
    const session = userSessions.get(userId);
    session.images = [];
    session.imageCount = 0;
    userSessions.set(userId, session);

    const message = {
        type: 'text',
        text: 'üì∑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö\n(‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏£‡∏π‡∏õ)\n\n‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 1/3\n\n(‡∏Å‡∏î "‡∏Ç‡πâ‡∏≤‡∏°" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)',
        quickReply: {
            items: [
                {
                    type: 'action',
                    action: {
                        type: 'postback',
                        label: '‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°',
                        data: 'skip_image',
                        displayText: '‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
                    }
                }
            ]
        }
    };

    return client.replyMessage(replyToken, message);
}

async function handleImageUpload(event, userId) {
    const session = userSessions.get(userId);
  
    if (!session || session.step !== 'ask_image') {
        return Promise.resolve(null);
    }

    try {
        session.images.push(event.message.id);
        session.imageCount = session.images.length;
        userSessions.set(userId, session);

        let responseMessage;

        if (session.imageCount < 3) {
            responseMessage = {
                type: 'text',
                text: `‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß (${session.imageCount}/3)\n\n‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠`,
                quickReply: {
                    items: [
                        {
                            type: 'action',
                            action: {
                                type: 'postback',
                                label: '‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
                                data: 'finish_images',
                                displayText: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
                            }
                        }
                    ]
                }
            };
        } else {
            // ‡∏Ñ‡∏£‡∏ö 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            responseMessage = {
                type: 'text',
                text: `‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`
            };
            
            // ‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
            session.step = 'ask_contact';
            userSessions.set(userId, session);
            
            await client.replyMessage(event.replyToken, responseMessage);
            return askContactInfo(null, userId);
        }

        return client.replyMessage(event.replyToken, responseMessage);

    } catch (error) {
        console.error('Error handling image:', error);
        return client.replyMessage(event.replyToken, {
            type: 'text',
            text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        });
    }
}

// Step 4: ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
function askContactInfo(replyToken, userId) {
    const session = userSessions.get(userId);
    session.step = 'ask_contact';
    userSessions.set(userId, session);

    const message = {
        type: 'text',
        text: 'üìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 081-234-5678\n- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: example@email.com\n- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ\n\n(‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö)'
    };

    if(replyToken) {
        return client.replyMessage(replyToken, message);
    } else {
        return client.pushMessage(userId, message); // ‡πÉ‡∏ä‡πâ pushMessage ‡πÅ‡∏ó‡∏ô replyMessage
    }
}

// Step 5: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô Flex Message)
function showSummary(replyToken, userId) {
    const session = userSessions.get(userId);

    const imageText = session.images && session.images.length > 0 ? `‡∏°‡∏µ ${session.images.length} ‡∏£‡∏π‡∏õ` : '‡πÑ‡∏°‡πà‡∏°‡∏µ';

    const message = {
        type: 'flex',
        altText: '‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        contents: {
            type: 'bubble',
            header: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'text',
                        text: 'üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
                        weight: 'bold',
                        size: 'lg',
                        align: 'center',
                        color: '#ffffff'
                    }
                ],
                backgroundColor: '#ff6b6b',
                paddingAll: 'lg'
            },
            body: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: 'üî∏ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 3
                                    },
                                    {
                                        type: 'text',
                                        text: session.problemTypeName,
                                        size: 'sm',
                                        color: '#333333',
                                        flex: 5,
                                        wrap: true
                                    }
                                ],
                                margin: 'sm'
                            },
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: 'üî∏ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 3
                                    },
                                    {
                                        type: 'text',
                                        text: session.problemDetails,
                                        size: 'sm',
                                        color: '#333333',
                                        flex: 5,
                                        wrap: true
                                    }
                                ],
                                margin: 'sm'
                            },
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: 'üî∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 3
                                    },
                                    {
                                        type: 'text',
                                        text: imageText,
                                        size: 'sm',
                                        color: session.images && session.images.length > 0 ? '#4CAF50' : '#FF9800',
                                        flex: 5,
                                        wrap: true
                                    }
                                ],
                                margin: 'sm'
                            },
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: 'üî∏ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 3
                                    },
                                    {
                                        type: 'text',
                                        text: session.contactInfo,
                                        size: 'sm',
                                        color: '#333333',
                                        flex: 5,
                                        wrap: true
                                    }
                                ],
                                margin: 'sm'
                            },
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: 'üî∏ ‡πÄ‡∏ß‡∏•‡∏≤:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 3
                                    },
                                    {
                                        type: 'text',
                                        text: session.timestamp,
                                        size: 'sm',
                                        color: '#333333',
                                        flex: 5,
                                        wrap: true
                                    }
                                ],
                                margin: 'sm'
                            }
                        ],
                        margin: 'lg'
                    },
                    {
                        type: 'separator',
                        margin: 'lg'
                    },
                    {
                        type: 'text',
                        text: '‚ùì ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                        weight: 'bold',
                        size: 'md',
                        align: 'center',
                        margin: 'lg',
                        color: '#333333'
                    }
                ],
                spacing: 'sm',
                paddingAll: 'lg'
            },
            footer: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'button',
                        action: {
                            type: 'postback',
                            label: '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡πà‡∏á',
                            data: 'submit_report',
                            displayText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
                        },
                        style: 'primary',
                        color: '#4CAF50'
                    },
                    {
                        type: 'button',
                        action: {
                            type: 'message',
                            label: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                            text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
                        },
                        style: 'secondary',
                        margin: 'sm'
                    }
                ],
                spacing: 'sm',
                paddingAll: 'lg'
            }
        }
    };

    return client.replyMessage(replyToken, message);
}

// Step 6: submit the report (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
async function submitReport(replyToken, userId) {
    const session = userSessions.get(userId);

    if (!session) {
        return client.replyMessage(replyToken, {
            type: 'text',
            text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà'
        });
    }

    const reportData = {
        user_id: userId,
        problem_type: session.problemType,
        problem_type_name: session.problemTypeName,
        problem_details: session.problemDetails || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        image_ids: session.images || [],                               
        image_count: session.images ? session.images.length : 0,      
        contact_info: session.contactInfo || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',               
        timestamp: session.timestamp || getThaiDateTime(),
        status: 'pending',
        ticket_id: generateTicketId()
    };

    try {
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram
        await notifyTelegram(reportData);

        //‡∏•‡∏ö session ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        userSessions.delete(userId);

        const imageText = reportData.image_count > 0                    
            ? `üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${reportData.image_count} ‡∏£‡∏π‡∏õ` 
            : 'üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ‡πÑ‡∏°‡πà‡∏°‡∏µ';
        
        const successMessage = {
            type: 'text',
            text: `‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n` +
                `üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: ${reportData.ticket_id}\n` +
                `üìß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n` +
                `${imageText}\n` +
                `üîî ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö\n\n` +
                `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö üôè`
        };

        console.log('Report Data:', reportData);

        return client.replyMessage(replyToken, successMessage);

    } catch (error) {
        console.error('Error submitting report:', error);
        
        return client.replyMessage(replyToken, {
            type: 'text',
            text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á'
        });
    }
}

// Telegram Notification Function (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà)
async function notifyTelegram(reportData) {
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN || '7501921791:AAHq28KxeNcGRAks4DGMoh6CmQw32chwOaQ';
    const telegramChatId = process.env.TELEGRAM_CHAT_ID || '-4699760769';

    try {
        const message = `üìã *‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà*
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: ${reportData.ticket_id}
üî∏ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${reportData.problem_type_name}
üî∏ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${reportData.problem_details}
üî∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${reportData.image_count > 0 ? `‡∏°‡∏µ ${reportData.image_count} ‡∏£‡∏π‡∏õ` : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'}
üî∏ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${reportData.contact_info}
üî∏ ‡πÄ‡∏ß‡∏•‡∏≤: ${reportData.timestamp}`;

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram
        await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
            chat_id: telegramChatId,
            text: message,
            parse_mode: 'Markdown'
        });

        // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (reportData.image_ids && reportData.image_ids.length > 0) {
            for (let i = 0; i < reportData.image_ids.length; i++) {
                const imageId = reportData.image_ids[i];
                try {
                    // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
                    const imageResponse = await axios.get(`https://api-data.line.me/v2/bot/message/${imageId}/content`, {
                        headers: {
                            'Authorization': `Bearer ${config.channelAccessToken}`
                        },
                        responseType: 'stream'
                    });

                    // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram ‡∏î‡πâ‡∏ß‡∏¢ FormData
                    const formData = new FormData();
                    formData.append('chat_id', telegramChatId);
                    formData.append('photo', imageResponse.data, {
                        filename: `image_${i + 1}.jpg`,
                        contentType: 'image/jpeg'
                    });
                    formData.append('caption', `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà ${i + 1} - ${reportData.ticket_id}`);

                    await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendPhoto`, formData, {
                        headers: formData.getHeaders()
                    });

                    console.log(`Successfully sent image ${i + 1} to Telegram`);

                } catch (imageError) {
                    console.error(`Error sending image ${i + 1}:`, imageError.message);
                    
                    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ
                    await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                        chat_id: telegramChatId,
                        text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà ${i + 1} ‡πÑ‡∏î‡πâ\nTicket: ${reportData.ticket_id}`
                    });
                }
            }
        }

        console.log('Successfully sent notification to Telegram');

    } catch (error) {
        console.error('Error sending notification to Telegram:', error.message);
        throw new Error(`Telegram notification failed: ${error.message}`);
    }
}

// Helper functions
function getProblemTypeName(type) {
  const types = {
    'hardware': '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
    'software': '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô Software'
  };
  return types[type] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
}

function generateTicketId() {
  return 'TK' + Date.now().toString().slice(-8);
}

function getThaiDateTime() {
    return new Date().toLocaleString('th-TH', {
        timeZone: 'Asia/Bangkok',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`LINE Bot listening on port ${PORT}`);
});

module.exports = app;